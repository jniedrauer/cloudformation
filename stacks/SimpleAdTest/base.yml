---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Simple AD and a test EC2 instance

Resources:

  TestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.12.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SimpleAdTest

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.12.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public0
      VpcId: !Ref TestVpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.12.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public1
      VpcId: !Ref TestVpc

  PublicRoutetable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestVpc
      Tags:
        - Key: Name
          Value: PublicRoute

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: publicigw

  IgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref TestVpc

  PublicRouteDefault:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRoutetable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  RouteTableAssoc0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutetable
      SubnetId: !Ref PublicSubnet0

  RouteTableAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutetable
      SubnetId: !Ref PublicSubnet1

  PrivateZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneTags:
        - Key: Name
          Value: jniedrauer.local
      Name: jniedrauer.local
      VPCs:
        - VPCId: !Ref TestVpc
          VPCRegion: us-east-1

  SimpleAdService:
    Type: AWS::DirectoryService::SimpleAD
    Properties:
      Description: SSH auth for Linux instances
      Name: ad.jniedrauer.local
      Password: !Ref AdAdminPassword
      ShortName: ad
      Size: Small
      VpcSettings:
        SubnetIds:
          - !Ref PublicSubnet0
          - !Ref PublicSubnet1
        VpcId: !Ref TestVpc

  DhcpConfig:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainNameServers: !GetAtt SimpleAdService.DnsIpAddresses
      NetbiosNameServers: !GetAtt SimpleAdService.DnsIpAddresses
      NetbiosNodeType: 2
      NtpServers: !GetAtt SimpleAdService.DnsIpAddresses
      Tags:
        - Key: Name
          Value: SimpleAdTestDhcp

  DhcpAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DhcpConfig
      VpcId: !Ref TestVpc

  InstanceSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AllowSSH
      GroupDescription: Allow SSH from everywhere
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: -1
          ToPort: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: SimpleAdTest
      VpcId: !Ref TestVpc

  TestInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "defaults"
        defaults:
          files:
            /tmp/cfn-init-default.sh:
              source: !Join
                - "/"
                - - https://s3.amazonaws.com
                  - !Ref CfnBucket
                  - provisioning-scripts/cfn-init-default.sh
              mode: "000700"
              owner: "root"
              group: "root"
            /usr/sbin/get-ldap-publickeys:
              source: !Join
                - "/"
                - - https://s3.amazonaws.com
                  - !Ref CfnBucket
                  - provisioning-scripts/get-ldap-publickeys.sh
              mode: "000755"
              owner: "root"
              group: "root"
          commands:
            1_execute:
              command: /tmp/cfn-init-default.sh
      AWS::CloudFormation::Authentication:
        S3AccessCredentials:
          buckets: !Ref CfnBucket
          type: S3
          accessKeyId: !Select
            - 0
            - !Ref Ec2ProvisionKeys
          secretKey: !Select
            - 1
            - !Ref Ec2ProvisionKeys
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Properties:
      SubnetId: !Ref PublicSubnet0
      ImageId: ami-428aa838
      InstanceType: t2.nano
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -x
          export PATH=$PATH:/opt/aws/bin
          cfn-init -v \
              --stack ${AWS::StackName} \
              --resource TestInstance \
              --region ${AWS::Region}
          cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource TestInstance \
              --region ${AWS::Region}
      SecurityGroupIds:
        - !Ref InstanceSg
      Tags:
        - Key: Name
          Value: SimpleAdTest
        - Key: Group
          Value: adjoin
    Condition: CreateEc2

Conditions:
  CreateEc2: !Equals
    - !Ref CreateEc2
    - true

Parameters:
  AdAdminPassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AdAdminPassword
    NoEcho: true
  Ec2ProvisionKeys:
    Type: AWS::SSM::Parameter::Value<List<String>>
    Default: Ec2ProvisionIamKeypair
    NoEcho: true
  CfnBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: CfnBucket
  CreateEc2:
    Type: String
    Default: true
